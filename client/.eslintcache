[{"C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\index.js":"1","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\components\\App.js":"2","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\reducers\\index.js":"3","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\pages\\Landing\\Landing.js":"4","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\pages\\User_Profile\\User_Profile.js":"5","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\pages\\Game\\Game.js":"6","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\reducers\\authReducer.js":"7","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\actions\\index.js":"8","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\components\\Square\\Square.js":"9","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\components\\ModalEditSquare\\ModalEditSquare.js":"10","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\utils\\API.js":"11","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\components\\ChatBox\\ChatBox.js":"12","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\components\\Footer\\Footer.js":"13","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\components\\UserGameList\\UserGameList.js":"14","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\components\\Header\\Header.js":"15","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\components\\Modal\\Modal.js":"16","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\utils\\statesPrimer.js":"17","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\actions\\types.js":"18","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\components\\ChatModal\\ChatModal.js":"19"},{"size":470,"mtime":1610643769095,"results":"20","hashOfConfig":"21"},{"size":929,"mtime":1611255746161,"results":"22","hashOfConfig":"21"},{"size":146,"mtime":1610643769097,"results":"23","hashOfConfig":"21"},{"size":2649,"mtime":1612283462398,"results":"24","hashOfConfig":"21"},{"size":8668,"mtime":1612550302691,"results":"25","hashOfConfig":"21"},{"size":23077,"mtime":1612627615332,"results":"26","hashOfConfig":"21"},{"size":252,"mtime":1610643769097,"results":"27","hashOfConfig":"21"},{"size":235,"mtime":1610643769092,"results":"28","hashOfConfig":"21"},{"size":2770,"mtime":1612540468258,"results":"29","hashOfConfig":"21"},{"size":3369,"mtime":1612540468257,"results":"30","hashOfConfig":"21"},{"size":997,"mtime":1612540468259,"results":"31","hashOfConfig":"21"},{"size":897,"mtime":1612627615330,"results":"32","hashOfConfig":"21"},{"size":235,"mtime":1611263407793,"results":"33","hashOfConfig":"21"},{"size":841,"mtime":1611268838039,"results":"34","hashOfConfig":"21"},{"size":1175,"mtime":1611263407794,"results":"35","hashOfConfig":"21"},{"size":586,"mtime":1611177904195,"results":"36","hashOfConfig":"21"},{"size":2828,"mtime":1611111087217,"results":"37","hashOfConfig":"21"},{"size":41,"mtime":1610643769092,"results":"38","hashOfConfig":"21"},{"size":2628,"mtime":1612629347423,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"9wa4l5",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\index.js",[],["85","86"],"C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\components\\App.js",[],"C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\reducers\\index.js",[],"C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\pages\\Landing\\Landing.js",[],"C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\pages\\User_Profile\\User_Profile.js",["87"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport API from '../../utils/API';\r\nimport UserGameList from '../../components/UserGameList/UserGameList';\r\nimport Header from '../../components/Header/Header';\r\nimport Footer from '../../components/Footer/Footer';\r\nimport Modal from '../../components/Modal/Modal';\r\nimport './User_Profile.css';\r\n\r\nconst UserProfile = (props) => {\r\n    const [userGames, setUserGames] = useState([]);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [selectedGameId, setSelectedGameId] = useState('');\r\n    const [gameTitleInput, setGameTitleInput] = useState('');\r\n    const [payoutOne, setPayoutOne] = useState('');\r\n    const [payoutTwo, setPayoutTwo] = useState('');\r\n    const [payoutThree, setPayoutThree] = useState('');\r\n    const [payoutFour, setPayoutFour] = useState('');\r\n    const [paymentInfo, setPaymentInfo] = useState('');\r\n    const [paymentEmail, setPaymentEmail] = useState('');\r\n    const [paymentPhone, setPaymentPhone] = useState('');\r\n    const [gameType, setGameType] = useState('');\r\n    const [costPerSquare, setCostPerSquare] = useState('');\r\n\r\n    useEffect(() => {\r\n        getUserGames();\r\n    }, [props.auth]);\r\n\r\n    const createGame = e => {\r\n        e.preventDefault();\r\n        if (gameTitleInput === '' || gameType === '') {\r\n            alert('Must add a game title and type!')\r\n            return;\r\n        }\r\n        if (gameType === 'Single') {\r\n            API.createGame({\r\n                ownerId: props.auth._id,\r\n                title: gameTitleInput,\r\n                gameType: gameType,\r\n                costPerSquare: costPerSquare,\r\n                payouts: {\r\n                    one: payoutOne,\r\n                    two: payoutTwo,\r\n                    three: payoutThree,\r\n                    four: payoutFour,\r\n                    email: paymentEmail,\r\n                    phone: paymentPhone,\r\n                    where: paymentInfo\r\n                }\r\n            }).then(() => getUserGames())\r\n        } else {\r\n            API.createQtrGame({\r\n                ownerId: props.auth._id,\r\n                title: gameTitleInput,\r\n                gameType: gameType,\r\n                costPerSquare: costPerSquare,\r\n                payouts: {\r\n                    one: payoutOne,\r\n                    two: payoutTwo,\r\n                    three: payoutThree,\r\n                    four: payoutFour,\r\n                    email: paymentEmail,\r\n                    phone: paymentPhone,\r\n                    where: paymentInfo\r\n                }\r\n            }).then(() => getUserGames())\r\n        }\r\n\r\n        setGameTitleInput('');\r\n        setCostPerSquare('');\r\n        setGameType('');\r\n        setPayoutOne('');\r\n        setPayoutTwo('');\r\n        setPayoutThree('');\r\n        setPayoutFour('');\r\n        setPaymentInfo('');\r\n        setPaymentEmail('');\r\n        setPaymentPhone('');\r\n    }\r\n\r\n    const getUserGames = () => {\r\n        if (!props.auth) {\r\n            return;\r\n        }\r\n        API.getUserGames(props.auth._id)\r\n            .then(result => {\r\n                console.log(result.data)\r\n                setUserGames(result.data)\r\n            })\r\n    }\r\n\r\n    const deleteGame = e => {\r\n        API.deleteGame(selectedGameId)\r\n            .then(() => {\r\n                setIsOpen(false)\r\n                API.getUserGames(props.auth._id)\r\n                    .then(result => {\r\n                        setUserGames(result.data)\r\n                    })\r\n            })\r\n    }\r\n\r\n    const openConfirmation = e => {\r\n        setSelectedGameId(e.target.id);\r\n        setIsOpen(true);\r\n    }\r\n\r\n    const paymentInfoClick = e => {\r\n        e.preventDefault();\r\n        setPaymentInfo(e.target.value)\r\n    }\r\n\r\n    const gameTypeClick = e => {\r\n        e.preventDefault();\r\n        setGameType(e.target.value);\r\n    }\r\n\r\n    if (!props.auth) {\r\n        return <div>Please Log In at https://www.thesquaresgame.com</div>\r\n    } else {\r\n        return (\r\n            <>\r\n                <div className='container'>\r\n                    <Header />\r\n                    <div className='profile'>\r\n                        <h1 id='profile-title'>User Profile</h1>\r\n                        <h4 id='created-games-title'>Select a Game:</h4>\r\n                        <div className='created-games'>\r\n                            <Modal open={isOpen} gameId={selectedGameId} deleteGame={deleteGame} onClose={() => setIsOpen(false)}>Are you sure you want to permanently delete this game?</Modal>\r\n                            <ul>\r\n                                <UserGameList userGames={userGames} openConfirmation={openConfirmation} />\r\n                            </ul>\r\n                        </div>\r\n                        <form className='game-title-div'>\r\n                            <h4>Create a Game:</h4>\r\n                            <input\r\n                                className='search-input game-title-input'\r\n                                placeholder='Game Title'\r\n                                value={gameTitleInput}\r\n                                onChange={e => setGameTitleInput(e.target.value)} />\r\n                            <h5 className='game-type-div'>Choose Game Type:</h5>\r\n                            <p>{gameType}</p>\r\n                            <div>\r\n                                <button className='payment-info-button' value='Single' onClick={gameTypeClick} >Single Number</button>\r\n                                <br />\r\n                                <button className='payment-info-button game-type-btn' value='PerQtr' onClick={gameTypeClick} >Different Number per Qtr</button>\r\n                            </div>\r\n                            <div className='payout-info-div'>\r\n                                <h5>How much per Square ($):</h5>\r\n                                <input className='payout-qtr-input cost-per-square' placeholder='$$$' value={costPerSquare} onChange={e => setCostPerSquare(e.target.value)} />\r\n                                <h5>Payouts per Quarter ($):</h5>\r\n                                <label>1<sup>st</sup> :</label>\r\n                                <input className='payout-qtr-input' placeholder='1st' value={payoutOne} onChange={e => setPayoutOne(e.target.value)} />\r\n                                <label>2<sup>nd</sup> :</label>\r\n                                <input className='payout-qtr-input' placeholder='2nd' value={payoutTwo} onChange={e => setPayoutTwo(e.target.value)} />\r\n                                <br />\r\n                                <label>3<sup>rd</sup> :</label>\r\n                                <input className='payout-qtr-input' placeholder='3rd' value={payoutThree} onChange={e => setPayoutThree(e.target.value)} />\r\n                                <label>4<sup>th</sup> :</label>\r\n                                <input className='payout-qtr-input' placeholder='4th' value={payoutFour} onChange={e => setPayoutFour(e.target.value)} />\r\n                            </div>\r\n                            <div className='payment-info'>\r\n                                <h5>Payment Info:</h5>\r\n                                <p>(How should people pay you? Select One)</p>\r\n                                <p>{paymentInfo}</p>\r\n                                <div>\r\n                                    <button className='payment-info-button' value='Venmo' onClick={paymentInfoClick} >Venmo</button>\r\n                                    <button className='payment-info-button' value='Zelle' onClick={paymentInfoClick} >Zelle</button>\r\n                                    <button className='payment-info-button' value='Both' onClick={paymentInfoClick} >Both</button>\r\n                                </div>\r\n                                <input className='payment-email-input search-input' placeholder='Email' value={paymentEmail} onChange={e => setPaymentEmail(e.target.value)} />\r\n                                <br />\r\n                                <input className='payment-phone-input search-input' placeholder='Phone Number' value={paymentPhone} onChange={e => setPaymentPhone(e.target.value)} />\r\n                            </div>\r\n                            <div>\r\n                                <button className='btn btn-success createbtn' onClick={createGame}>Create Game</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                    <Footer />\r\n                </div>\r\n            </>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps({ auth }) {\r\n    return { auth };\r\n}\r\n\r\nexport default connect(mapStateToProps)(UserProfile);","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\pages\\Game\\Game.js",["88","89","90","91","92","93"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport Square from \"../../components/Square/Square.js\";\r\nimport API from \"../../utils/API\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { preSetSquares } from \"../../utils/statesPrimer\";\r\nimport Header from '../../components/Header/Header';\r\nimport Footer from '../../components/Footer/Footer';\r\nimport ModalEditSquare from '../../components/ModalEditSquare/ModalEditSquare.js';\r\nimport ChatBox from '../../components/ChatBox/ChatBox.js';\r\nimport \"./Game.css\"\r\n\r\nlet socket;\r\nlet pendingSquares = [];\r\n\r\nconst Game = (props) => {\r\n\r\n    const [paramsId, setParamsId] = useState(props.match.params.id);\r\n    const [chat, setChat] = useState()\r\n    const [modalAdmin, setModalAdmin] = useState(false);\r\n    const [firstName, setFirstName] = useState(\"\");\r\n    const [lastName, setLastName] = useState(\"\");\r\n    const [game, setGame] = useState();\r\n    const [squares, setSquares] = useState(preSetSquares);\r\n    const [editSquareName, setSquareName] = useState(\"\");\r\n    const [squareId, setSquareId] = useState(\"\");\r\n    const [modalColor, setModalColor] = useState(\"\");\r\n    const [modalButtonColor, setModalButtonColor] = useState(\"\");\r\n    const [modalSquareCounter, setModalSquareCounter] = useState(\"\");\r\n    const [modalOptionValue, setModalOptionValue] = useState(\"\");\r\n    const [xArray, setXarray] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\r\n    const [yArray, setYarray] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\r\n    const [blackNumbers, setBlackNumbers] = useState(true);\r\n    const [qtrView, setQtrView] = useState('');\r\n    const [showQtrOptions, setShowQtrOptions] = useState(false);\r\n    const [chatId, setChatId] = useState(\"\");\r\n\r\n    let flip = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];\r\n\r\n    const [flipStatus, setFlipStatus] = useState(flip);\r\n    const rowLength = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n\r\n    useEffect(() => {\r\n        socket = socketIOClient();\r\n        socket.on(props.match.params.id, (game) => {\r\n            setGame(game)\r\n            setSquares(game.squares)\r\n            let finish = true\r\n            for (let i = 0; i < game.squares.length; i++) {\r\n                if (game.squares[i].active === true) {\r\n                    finish = false\r\n                    break;\r\n                }\r\n            }\r\n            if (finish) {\r\n                window.location.href = `/game/${props.match.params.id}`;\r\n            } else {\r\n                setXarray([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\r\n                setYarray([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\r\n                setShowQtrOptions(false);\r\n                setQtrView('');\r\n            }\r\n\r\n        });\r\n\r\n        socket.on(props.match.params.id + \"chat\", (chatData) => {\r\n            setChat(chatData[0].chat)\r\n            setChatId(chatData[0]._id)\r\n        });\r\n\r\n        socket.on(\"activeUsersOnGamePage\", (userCount)=>{\r\n            console.log(\"Total Users on Game Page\" + \" \" + userCount);\r\n        })\r\n\r\n        API.getGame(props.match.params.id).then((game) => {\r\n            if (game.data !== \"\") {\r\n                setGame(game.data)\r\n                setSquares(game.data.squares)\r\n                let finish = true\r\n                for (let i = 0; i < game.data.squares.length; i++) {\r\n                    if (game.data.squares[i].active === true) {\r\n                        finish = false\r\n                        break;\r\n                    }\r\n                }\r\n                if (finish) {\r\n                    setXarray(game.data.xArray);\r\n                    setYarray(game.data.yArray);\r\n                    if(game.data.gameType === 'PerQtr') {\r\n                        setShowQtrOptions(true);\r\n                        setQtrView('1st Quarter')\r\n                    }\r\n                } else {\r\n                    setXarray([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\r\n                    setYarray([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\r\n                }\r\n                if (props.auth) {\r\n                    adminCheck(game.data);\r\n                }\r\n            } else {\r\n                window.location.href = \"/\"\r\n            }\r\n        })\r\n        API.getChat(props.match.params.id).then((chatData) => {\r\n            if(chatData.data.chat){\r\n                setChat(chatData.data.chat)\r\n                setChatId(chatData.data._id)\r\n            }else{\r\n                setChat(chatData.data[0].chat);\r\n                setChatId(chatData.data[0]._id)\r\n            }\r\n        })\r\n\r\n        return () => {\r\n            pendingSquares = [];\r\n            socket.disconnect()\r\n        };\r\n    }, [props.auth]);\r\n\r\n    const socketGetUpdatedChat = async () =>{\r\n        socket.emit('getUpdatedChat', props.match.params.id);\r\n    }\r\n    const flipFunction = (event) => {\r\n        let chosenSquare = event.target.id\r\n        let chosenAlready = false;\r\n\r\n        //delete from array on second click\r\n        for (var i = 0; i < pendingSquares.length; i++) {\r\n            if (pendingSquares[i] == chosenSquare) {\r\n                chosenAlready = true\r\n                pendingSquares.splice(i, 1)\r\n            }\r\n        }\r\n\r\n        //add to array on first click\r\n        if (chosenAlready == false) {\r\n            pendingSquares.push(chosenSquare)\r\n        }\r\n        for (let i = 0; i < pendingSquares.length; i++) {\r\n            flip[pendingSquares[i]] = !flip[pendingSquares[i]]\r\n        }\r\n        setFlipStatus(flip);\r\n    }\r\n\r\n    const renderQuarterClick = e => {\r\n        if(e.target.value === 'One') {\r\n            setQtrView('1st Quarter')\r\n            setXarray(game.xArray)\r\n            setYarray(game.yArray)\r\n        } else if (e.target.value === 'Two') {\r\n            setQtrView('2nd Quarter')\r\n            setXarray(game.xArrayTwo)\r\n            setYarray(game.yArrayTwo)\r\n        } else if (e.target.value === 'Three') {\r\n            setQtrView('3rd Quarter')\r\n            setXarray(game.xArrayThree)\r\n            setYarray(game.yArrayThree)\r\n        } else {\r\n            setQtrView('4th Quarter')\r\n            setXarray(game.xArrayFour)\r\n            setYarray(game.yArrayFour)\r\n        }\r\n        \r\n    }\r\n\r\n    const renderQtrOptions = () => {\r\n        if (!game || game.gameType === 'Single') {\r\n            return;\r\n        }\r\n\r\n        if (showQtrOptions === false) {\r\n            return;\r\n        }\r\n\r\n        return (\r\n            <div className='all-qtr-btns'>\r\n                <button className='payment-info-button qtr-view-btns' value='One' onClick={renderQuarterClick} >1st Qtr</button>\r\n                <button className='payment-info-button qtr-view-btns' value='Two' onClick={renderQuarterClick} >2nd Qtr</button>\r\n                <br />\r\n                <button className='payment-info-button qtr-view-btns' value='Three' onClick={renderQuarterClick} >3rd Qtr</button>\r\n                <button className='payment-info-button qtr-view-btns' value='Four' onClick={renderQuarterClick} >4th Qtr</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const updateGame = async () => {\r\n        if (firstName.length <= 1 || lastName.length <= 1) {\r\n            alert('Must add FULL first and last name!')\r\n            return;\r\n        }\r\n        try {\r\n            await API.updateGame(props.match.params.id, { pendingSquares: pendingSquares, firstName: firstName.toUpperCase().trim(), lastName: lastName.toUpperCase().trim() });\r\n            socket.emit('getUpdatedGame', props.match.params.id);\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const adminCheck = (game) => {\r\n        if (props.auth._id === game.ownerId) {\r\n            setModalAdmin(true)\r\n        }\r\n    }\r\n\r\n    const adminEdit = (event) => {\r\n        let choice = event.target.id;\r\n        let colorIndex = squares[choice].color.indexOf(\" \");\r\n        let colorBody = squares[choice].color.slice(0, colorIndex);\r\n        let colorButton = \"btn shadow-lg \" + colorBody;\r\n        colorBody = \"modal-body \" + colorBody;\r\n        let a = 0;\r\n        for (let i = 0; i < squares.length; i++) {\r\n            if (squares[i].name === squares[choice].name) {\r\n                a++\r\n            }\r\n        }\r\n        setModalSquareCounter(a);\r\n        setModalButtonColor(colorButton);\r\n        setModalColor(colorBody);\r\n        setSquareId(choice);\r\n        setSquareName(squares[choice].name)\r\n    }\r\n\r\n    const handleChangeModal = (event) => {\r\n        setModalOptionValue(event.target.value)\r\n    }\r\n\r\n    const modalSubmitButton = async () => {\r\n        if (modalOptionValue === \"Delete\") {\r\n            try {\r\n                await API.updateSquare(props.match.params.id, { id: squareId });\r\n                socket.emit('getUpdatedGame', props.match.params.id);\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n        if (modalOptionValue === \"Delete All\") {\r\n            try {\r\n                await API.deleteParticipant(props.match.params.id, editSquareName);\r\n                socket.emit('getUpdatedGame', props.match.params.id);\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const renderPaymentInfo = () => {\r\n        if (!game) {\r\n            return;\r\n        }\r\n\r\n        const copyLink = e => {\r\n            navigator.clipboard.writeText(`https://www.thesquaresgame.com/game/${e.target.id}`)\r\n        }\r\n\r\n        const renderWhere = () => {\r\n            if (game.payouts.where === 'Both') {\r\n                return <p>Venmo or Zelle @</p>\r\n            }\r\n\r\n            return <p>{game.payouts.where} @</p>\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <h1 id='game-title'>{game.title}</h1>\r\n                <h4>Game id:</h4>\r\n                <h6>{game._id}</h6>\r\n                <button type='button' className='copybtn btn btn-outline-success btn-sm' onClick={copyLink} id={game._id}>Copy Link</button>\r\n                <h4 className='game-direction-title'>Cost per Square:</h4>\r\n                <h6 className='payouts-per-qtr'>{game.costPerSquare}</h6>\r\n                <h4 className='game-direction-title'>Payment Info:</h4>\r\n                <h6>{renderWhere()}</h6>\r\n                <h6>Email: {game.payouts.email}</h6>\r\n                <h6>Phone: {game.payouts.phone}</h6>\r\n                <h4 className='game-direction-title'>Payouts per Quarter:</h4>\r\n                <h6 className='payouts-per-qtr'>1st: {game.payouts.one}</h6>\r\n                <h6 className='payouts-per-qtr'>2nd: {game.payouts.two}</h6>\r\n                <h6 className='payouts-per-qtr'>3rd: {game.payouts.three}</h6>\r\n                <h6 className='payouts-per-qtr'>4th: {game.payouts.four}</h6>\r\n                <h2 className='game-direction-title' id='game-direction-title'>Input your name, select Squares, and submit!</h2>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='container'>\r\n                <Header />\r\n                <div className='game-info'>\r\n                    {renderPaymentInfo()}\r\n                </div>\r\n            </div>\r\n            <div className=\"game-square\">\r\n                <div className=\"row mb-2 maybe\">\r\n                    <div className=\"col-1 col-md-3\"></div>\r\n                    <div className=\"col-8 col-md-6 text-center name-inputs-div\" id=\"name-div\">\r\n                        <div className=\"row input-box\">\r\n                            <div className=\"col-6 col-md-4 pr-1\" id=\"please\">\r\n                                <input type=\"name\" className=\"input-name\" id='first-name-input' placeholder=\"first\" value={firstName} onChange={(event) => { setFirstName(event.target.value) }}></input>\r\n                            </div>\r\n                            <div className=\"col-6 col-md-4\" id=\"please\">\r\n                                <input type=\"name\" className=\"input-name\" id='last-name-input' placeholder=\"last\" value={lastName} onChange={(event) => { setLastName(event.target.value) }}></input>\r\n                            </div>\r\n                            <div>\r\n                                <div className=\"col-12 col-md-4 input-button\">\r\n                                    <button onClick={updateGame} type=\"button\" className=\"btn btn-outline-danger btn-submit\">Submit</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div>{renderQtrOptions()}</div>\r\n                <h4 className='all-qtr-btns'>{qtrView}</h4>\r\n\r\n                <div className=\"row game-box\">\r\n                    <div className=\"col-11\">\r\n                        <div className=\"row square-rows\">\r\n                            <div className=\"col-1 x-num-row\" />\r\n                            {rowLength.map((user, i) => (\r\n                                <div className=\"col-1\" key={i}>\r\n                                    <Square squareId=\"1-2\" id={i} blackNumbers={blackNumbers} adminEdit={adminEdit} color={squares[i].color} modalAdmin={modalAdmin} flipFunciton={flipFunction} isFlipped={flipStatus[i]} active={squares[i].active}>\r\n                                        {xArray[i]}\r\n                                    </Square>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"row square-rows\">\r\n                            <div className='col-1 y-row'>\r\n                                <p className='y-numbers'>{yArray[0]}</p>\r\n                            </div>\r\n                            {rowLength.map((user, i) => (\r\n                                <div className=\"col-1\" key={i}>\r\n                                    <Square squareId=\"1-2\" id={i} adminEdit={adminEdit} color={squares[i].color} modalAdmin={modalAdmin} flipFunciton={flipFunction} isFlipped={flipStatus[i]} active={squares[i].active}>\r\n                                        {squares[i].initials}\r\n                                    </Square>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"row square-rows\">\r\n                            <div className='col-1 y-row'>\r\n                                <p className='y-numbers'>{yArray[1]}</p>\r\n                            </div>\r\n                            {rowLength.map((user, i) => (\r\n                                <div className=\"col-1\" key={i + 10}>\r\n                                    <Square squareId=\"1-2\" id={i + 10} adminEdit={adminEdit} color={squares[i + 10].color} modalAdmin={modalAdmin} flipFunciton={flipFunction} isFlipped={flipStatus[i + 10]} active={squares[i + 10].active}>\r\n                                        {squares[i + 10].initials}\r\n                                    </Square>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"row square-rows\">\r\n                            <div className='col-1 y-row'>\r\n                                <p className='y-numbers'>{yArray[2]}</p>\r\n                            </div>\r\n                            {rowLength.map((user, i) => (\r\n                                <div className=\"col-1\" key={i + 20}>\r\n                                    <Square squareId=\"1-2\" id={i + 20} adminEdit={adminEdit} color={squares[i + 20].color} modalAdmin={modalAdmin} flipFunciton={flipFunction} isFlipped={flipStatus[i + 20]} active={squares[i + 20].active}>\r\n                                        {squares[i + 20].initials}\r\n                                    </Square>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"row square-rows\">\r\n                            <div className='col-1 y-row'>\r\n                                <p className='y-numbers'>{yArray[3]}</p>\r\n                            </div>\r\n                            {rowLength.map((user, i) => (\r\n                                <div className=\"col-1\" key={i + 30}>\r\n                                    <Square squareId=\"1-2\" id={i + 30} adminEdit={adminEdit} color={squares[i + 30].color} modalAdmin={modalAdmin} flipFunciton={flipFunction} isFlipped={flipStatus[i + 30]} active={squares[i + 30].active}>\r\n                                        {squares[i + 30].initials}\r\n                                    </Square>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"row square-rows\">\r\n                            <div className='col-1 y-row'>\r\n                                <p className='y-numbers'>{yArray[4]}</p>\r\n                            </div>\r\n                            {rowLength.map((user, i) => (\r\n                                <div className=\"col-1\" key={i + 40}>\r\n                                    <Square squareId=\"1-2\" id={i + 40} adminEdit={adminEdit} color={squares[i + 40].color} modalAdmin={modalAdmin} flipFunciton={flipFunction} isFlipped={flipStatus[i + 40]} active={squares[i + 40].active}>\r\n                                        {squares[i + 40].initials}\r\n                                    </Square>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"row square-rows\">\r\n                            <div className='col-1 y-row'>\r\n                                <p className='y-numbers'>{yArray[5]}</p>\r\n                            </div>\r\n                            {rowLength.map((user, i) => (\r\n                                <div className=\"col-1\" key={i + 50}>\r\n                                    <Square squareId=\"1-2\" id={i + 50} adminEdit={adminEdit} color={squares[i + 50].color} modalAdmin={modalAdmin} flipFunciton={flipFunction} isFlipped={flipStatus[i + 50]} active={squares[i + 50].active}>\r\n                                        {squares[i + 50].initials}\r\n                                    </Square>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"row square-rows\">\r\n                            <div className='col-1 y-row'>\r\n                                <p className='y-numbers'>{yArray[6]}</p>\r\n                            </div>\r\n                            {rowLength.map((user, i) => (\r\n                                <div className=\"col-1\" key={i + 60}>\r\n                                    <Square squareId=\"1-2\" id={i + 60} adminEdit={adminEdit} color={squares[i + 60].color} modalAdmin={modalAdmin} flipFunciton={flipFunction} isFlipped={flipStatus[i + 60]} active={squares[i + 60].active}>\r\n                                        {squares[i + 60].initials}\r\n                                    </Square>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"row square-rows\">\r\n                            <div className='col-1 y-row'>\r\n                                <p className='y-numbers'>{yArray[7]}</p>\r\n                            </div>\r\n                            {rowLength.map((user, i) => (\r\n                                <div className=\"col-1\" key={i + 70}>\r\n                                    <Square squareId=\"1-2\" id={i + 70} adminEdit={adminEdit} color={squares[i + 70].color} modalAdmin={modalAdmin} flipFunciton={flipFunction} isFlipped={flipStatus[i + 70]} active={squares[i + 70].active}>\r\n                                        {squares[i + 70].initials}\r\n                                    </Square>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"row square-rows\">\r\n                            <div className='col-1 y-row'>\r\n                                <p className='y-numbers'>{yArray[8]}</p>\r\n                            </div>\r\n                            {rowLength.map((user, i) => (\r\n                                <div className=\"col-1\" key={i + 80}>\r\n                                    <Square squareId=\"1-2\" id={i + 80} adminEdit={adminEdit} color={squares[i + 80].color} modalAdmin={modalAdmin} flipFunciton={flipFunction} isFlipped={flipStatus[i + 80]} active={squares[i + 80].active}>\r\n                                        {squares[i + 80].initials}\r\n                                    </Square>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"row square-rows\">\r\n                            <div className='col-1 y-row'>\r\n                                <p className='y-numbers'>{yArray[9]}</p>\r\n                            </div>\r\n                            {rowLength.map((user, i) => (\r\n                                <div className=\"col-1\" key={i + 90}>\r\n                                    <Square squareId=\"1-2\" id={i + 90} adminEdit={adminEdit} color={squares[i + 90].color} modalAdmin={modalAdmin} flipFunciton={flipFunction} isFlipped={flipStatus[i + 90]} active={squares[i + 90].active}>\r\n                                        {squares[i + 90].initials}\r\n                                    </Square>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <p className='home'>Bucs</p>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <p className='away'>Chiefs</p>\r\n                </div>\r\n                <ChatBox  chat={chat} socketGetUpdatedChat={socketGetUpdatedChat} paramsId={paramsId} chatId={chatId}></ChatBox>\r\n                <ModalEditSquare modalAdmin={modalAdmin} squareId={squareId} editSquareName={editSquareName} modalColor={modalColor} modalButtonColor={modalButtonColor} modalSquareCounter={modalSquareCounter} handleChangeModal={handleChangeModal} modalOptionValue={modalOptionValue} modalSubmitButton={modalSubmitButton}></ModalEditSquare>\r\n                {/* container end div */}\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\nfunction mapStateToProps({ auth }) {\r\n    return { auth };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Game);","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\reducers\\authReducer.js",["94"],"import { FETCH_USER } from '../actions/types';\r\n\r\nexport default function (state = null, action) {\r\n    switch (action.type) {\r\n        case FETCH_USER:\r\n            return action.payload || false;\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\actions\\index.js",[],"C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\components\\Square\\Square.js",["95","96","97","98"],"import React from \"react\";\r\nimport ReactCardFlip from 'react-card-flip'\r\nimport \"./Square.css\"\r\n\r\nconst Square = (props) => {\r\n\r\n    if (props.blackNumbers) {\r\n\r\n        return (\r\n            <>\r\n                <ReactCardFlip isFlipped={false} flipDirection=\"horizontal\" flipSpeedFrontToBack=\"1.5\" flipSpeedFrontToBack=\"1.5\">\r\n                    <div style={{backgroundColor:\"#1A1A1D\", border:\"none\"}} className=\"text-center cardDimensions\" id={props.id} data-value={props.data} onClick={props.flipFunciton}>\r\n                        {props.children}\r\n                    </div>\r\n\r\n                    <div style={{backgroundColor:\"#1A1A1D\"}} className=\"text-center justify-content-center cardDimensions\" id={props.id} data-value={props.data} onClick={props.flipFunciton}>\r\n                    {props.children}\r\n                    </div>\r\n                </ReactCardFlip>\r\n            </>\r\n        )\r\n    } \r\n    if (props.active) {\r\n\r\n        return (\r\n            <>\r\n                <ReactCardFlip isFlipped={props.isFlipped} flipDirection=\"horizontal\" flipSpeedFrontToBack=\"1.5\" flipSpeedFrontToBack=\"1.5\">\r\n                    <div style={{backgroundColor:\"#1A1A1D\"}}className=\"text-center cardDimensions\" id={props.id} data-value={props.data} onClick={props.flipFunciton}>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"bg-info text-center justify-content-center cardDimensions\" id={props.id} data-value={props.data} onClick={props.flipFunciton}>\r\n\r\n                    </div>\r\n                </ReactCardFlip>\r\n            </>\r\n        )\r\n    } \r\n    if(props.modalAdmin){\r\n       return( <ReactCardFlip   isFlipped={false} flipDirection=\"horizontal\" flipSpeedFrontToBack=\"1.5\" flipSpeedFrontToBack=\"1.5\" onClick={props}>\r\n                <div onClick={props.adminEdit} data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\" data-bs-keyboard=\"false\" className={props.color} id={props.id}>\r\n                    {props.children}\r\n                </div>\r\n                <div className=\"bg-info text-center justify-content-center\" id={props.id}>\r\n                    {props.name}\r\n                </div>\r\n            </ReactCardFlip>\r\n       )\r\n    }\r\n        return (\r\n\r\n            <ReactCardFlip   isFlipped={false} flipDirection=\"horizontal\" flipSpeedFrontToBack=\"1.5\" flipSpeedFrontToBack=\"1.5\" onClick={props}>\r\n                <div className={props.color} id={props.id} onClick={props.adminEdit} data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\" >\r\n                    {props.children}\r\n                </div>\r\n                <div className=\"bg-info text-center justify-content-center\" id={props.id}>\r\n                    {props.name}\r\n                </div>\r\n            </ReactCardFlip>\r\n        )\r\n\r\n}\r\n\r\nexport default Square;","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\components\\ModalEditSquare\\ModalEditSquare.js",[],"C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\utils\\API.js",["99"],"import axios from \"axios\";\r\n\r\nexport default {\r\n  getGames: function() {\r\n    return axios.get(\"/api/games/\");\r\n  },\r\n  getGame: function(id) {\r\n    return axios.get(\"/api/game/\" + id);\r\n  },\r\n  deleteGame: function(id) {\r\n    return axios.delete(\"/api/game/\" + id);\r\n  },\r\n  createGame: function(data){\r\n    return axios.post(\"/api/game/create\", data);\r\n  },\r\n  createQtrGame: function(data){\r\n    return axios.post(\"/api/game/create/qtr\", data);\r\n  },\r\n  updateGame: function(id,data){\r\n    return axios.put(\"/api/game/\" + id, data);\r\n  },\r\n  getUserGames: function(userId) {\r\n    return axios.get(\"/api/games/\" + userId);\r\n  },\r\n  updateSquare: function(id, data) {\r\n    return axios.put(\"/api/square/\" + id, data);\r\n  },\r\n  deleteParticipant: function(id,name){\r\n    return axios.delete(\"/api/square/\" + id + \"/\"+ name)\r\n  },\r\n  getChat: function(id){\r\n    return axios.get(\"/api/chat/\" + id);\r\n  },\r\n  updateChat: function(id,data){\r\n    return axios.put(\"/api/chat/\" + id, data);\r\n  },\r\n\r\n};","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\components\\ChatBox\\ChatBox.js",["100","101","102","103","104","105","106"],"import React, { useEffect, useState } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport API from \"../../utils/API\";\r\nimport ChatModal from \"../ChatModal/ChatModal\";\r\nimport \"./ChatBox.css\"\r\n\r\nlet socket;\r\n\r\nconst ChatBox = (props) => {\r\n    const [chatName, setChatName] = useState(\"\");\r\n    const [chatMessage, setChatMessage] = useState(\"\");\r\n    const [chat, setChat] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        if (!props.chat) return null;\r\n\r\n        setChat(props.chat)\r\n    }, [props.chat]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"chat-div\" data-bs-toggle=\"modal\" data-bs-target=\"#ChatModal\">\r\n                <h3>CHAT</h3>\r\n            </div>\r\n            <ChatModal chat={chat} socketGetUpdatedChat={props.socketGetUpdatedChat} paramsId={props.paramsId} chatId={props.chatId}></ChatModal>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default ChatBox;","C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\components\\Footer\\Footer.js",[],"C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\components\\UserGameList\\UserGameList.js",[],"C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\components\\Header\\Header.js",[],"C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\components\\Modal\\Modal.js",[],"C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\utils\\statesPrimer.js",[],"C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\actions\\types.js",[],"C:\\Users\\young\\Desktop\\sbSquares\\client\\src\\components\\ChatModal\\ChatModal.js",[],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":27,"column":8,"nodeType":"113","endLine":27,"endColumn":20,"suggestions":"114"},{"ruleId":"115","severity":1,"message":"116","line":18,"column":22,"nodeType":"117","messageId":"118","endLine":18,"endColumn":33},{"ruleId":"115","severity":1,"message":"119","line":33,"column":26,"nodeType":"117","messageId":"118","endLine":33,"endColumn":41},{"ruleId":"120","severity":1,"message":"121","line":72,"column":52,"nodeType":"122","messageId":"123","endLine":72,"endColumn":53},{"ruleId":"111","severity":1,"message":"124","line":118,"column":8,"nodeType":"113","endLine":118,"endColumn":20,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":129,"column":35,"nodeType":"122","messageId":"128","endLine":129,"endColumn":37},{"ruleId":"126","severity":1,"message":"127","line":136,"column":27,"nodeType":"122","messageId":"128","endLine":136,"endColumn":29},{"ruleId":"129","severity":1,"message":"130","line":3,"column":1,"nodeType":"131","endLine":10,"endColumn":2},{"ruleId":"132","severity":1,"message":"133","line":11,"column":104,"nodeType":"134","endLine":11,"endColumn":130},{"ruleId":"132","severity":1,"message":"133","line":27,"column":114,"nodeType":"134","endLine":27,"endColumn":140},{"ruleId":"132","severity":1,"message":"133","line":40,"column":105,"nodeType":"134","endLine":40,"endColumn":131},{"ruleId":"132","severity":1,"message":"133","line":52,"column":102,"nodeType":"134","endLine":52,"endColumn":128},{"ruleId":"129","severity":1,"message":"135","line":3,"column":1,"nodeType":"131","endLine":38,"endColumn":3},{"ruleId":"115","severity":1,"message":"136","line":2,"column":8,"nodeType":"117","messageId":"118","endLine":2,"endColumn":22},{"ruleId":"115","severity":1,"message":"137","line":3,"column":8,"nodeType":"117","messageId":"118","endLine":3,"endColumn":11},{"ruleId":"115","severity":1,"message":"138","line":7,"column":5,"nodeType":"117","messageId":"118","endLine":7,"endColumn":11},{"ruleId":"115","severity":1,"message":"139","line":10,"column":12,"nodeType":"117","messageId":"118","endLine":10,"endColumn":20},{"ruleId":"115","severity":1,"message":"140","line":10,"column":22,"nodeType":"117","messageId":"118","endLine":10,"endColumn":33},{"ruleId":"115","severity":1,"message":"141","line":11,"column":12,"nodeType":"117","messageId":"118","endLine":11,"endColumn":23},{"ruleId":"115","severity":1,"message":"142","line":11,"column":25,"nodeType":"117","messageId":"118","endLine":11,"endColumn":39},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUserGames'. Either include it or remove the dependency array.","ArrayExpression",["145"],"no-unused-vars","'setParamsId' is assigned a value but never used.","Identifier","unusedVar","'setBlackNumbers' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has missing dependencies: 'adminCheck' and 'props.match.params.id'. Either include them or remove the dependency array.",["146"],"eqeqeq","Expected '===' and instead saw '=='.","unexpected","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","Assign object to a variable before exporting as module default","'socketIOClient' is defined but never used.","'API' is defined but never used.","'socket' is defined but never used.","'chatName' is assigned a value but never used.","'setChatName' is assigned a value but never used.","'chatMessage' is assigned a value but never used.","'setChatMessage' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},"Update the dependencies array to be: [getUserGames, props.auth]",{"range":"151","text":"152"},"Update the dependencies array to be: [adminCheck, props.auth, props.match.params.id]",{"range":"153","text":"154"},[1217,1229],"[getUserGames, props.auth]",[5325,5337],"[adminCheck, props.auth, props.match.params.id]"]